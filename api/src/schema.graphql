type Tag {
   name: String!
   questions: [Question] @relation(name: "TAGGED", direction: "IN")
}

type Answer {
   createdAt: DateTime
   downVotes: Int
   id: Int!
   link: String
   text: String
   upVotes: Int
   answers: Question @relation(name: "ANSWERS", direction: "OUT")
   user: User @relation(name: "PROVIDED", direction: "IN")
}


type User {
   display_name: String
   id: Int!
   image: String
   link: String
   reputation: Int
   acceptedCount: Int @cypher(statement: "RETURN size((this)-[:PROVIDED]->(:Answer {accepted:true})) as accepted")
   recommendedQuestions: [Question] @cypher(statement: "MATCH (this)-[:PROVIDED]->(:Answer)-[:ANSWERS]->(:Question)-[:TAGGED]->(tag:Tag) WITH tag, count(*) as freq order by freq desc limit 4 MATCH (tag)<-[:TAGGED]-(q:Question {answered:false})  RETURN q ORDER BY q.favorites DESC LIMIT 5 ")
   provided: [Answer] @relation(name: "PROVIDED", direction: "OUT")
   asked: [Question] @relation(name: "ASKED", direction: "OUT")
}

type Question {
   answered: Boolean
   createdAt: DateTime
   downVotes: Int
   favorites: Int
   id: Int!
   link: String
   text: String
   title: String!
   upVotes: Int
   tagged: [Tag] @relation(name: "TAGGED", direction: "OUT")
   answers: [Answer] @relation(name: "ANSWERS", direction: "IN")
   user: User @relation(name: "ASKED", direction: "IN")
}

type Rating {
  stars: Int
  count: Int
}
type Query {
  userCount: Int! @cypher(statement:"MATCH (u:User) RETURN count(*) as users")
  ratingsCount: [Rating] @cypher(statement:"MATCH (u:User) WITH u.reputation/1000*1000 as stars, count(*) as count RETURN {stars:stars, count:count}")
  }
type Mutation {
   upvote(id:Int!):Question @cypher(statement:"MATCH (q:Question {id:toInteger($id)}) SET q.favorites = q.favorites + 1 RETURN q")
}
schema {
  query: Query
  mutation: Mutation
}